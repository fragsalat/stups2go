#!/bin/sh

TOOLS_DIR=$(dirname $0)

if [ $# -lt 5 ]; then
    echo "Usage:  $0 <postgres-version> <dbname> <docker-image> [<docker-opts>] -- <command>" >&2
    exit 1
fi


DOCKER_IMAGE=$3

DB_VERSION=$1
DB_NAME=$2
DB_HOST=test-postgres
DB_PORT=5432
DB_SUBNAME="//$DB_HOST:$DB_PORT/$DB_NAME"
DB_USER=postgres
DB_PASSWORD=postgres

# clean-up old Docker container
docker rm -fv $DB_HOST

# start postgres
echo "INFO: Starting PostgreSQL database..."
docker run -d --name $DB_HOST -e POSTGRES_PASSWORD=$DB_PASSWORD postgres:$DB_VERSION
[ $? -ne 0 ] && exit 1

# wait until db was bootstrapped
COUNTER=0
while [ true ]; do
    docker run --rm --link $DB_HOST -e PGPASSWORD=$DB_PASSWORD --entrypoint psql postgres:$DB_VERSION -h $DB_HOST -p $DB_PORT -U $DB_USER -c "CREATE DATABASE \"${DB_NAME}\";"
    [ $? -eq 0 ] && break

    if [ $COUNTER -gt 60 ]; then
        echo "ERROR: Not waiting any longer for PostgreSQL database to come up!"

        docker rm -f -v $DB_HOST
        [ $? -ne 0 ] && echo "ERROR: Could not cleanly shut down PostgreSQL server!"

        exit 1
    fi

    echo "INFO: Waiting for database to come up..."
    sleep 5
    COUNTER=$(($COUNTER + 5))
done

# remove first 3 args, we saved them leaving us with docker opts and command for the run tool
shift 3

# container link and setup
DOCKER_OPTS="--link $DB_HOST -e DB_SUBNAME=$DB_SUBNAME -e DB_NAME=$DB_NAME -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD"

# execute real command
echo "INFO: Database ready, running actual command..."
$TOOLS_DIR/run $DOCKER_IMAGE $DOCKER_OPTS $*
status=$?

# shutdown postgres
echo "INFO: Shutting down database..."
docker rm -f -v $DB_HOST
[ $? -ne 0 ] && echo "ERROR: Could not cleanly shut down PostgreSQL server!"

# give correct feedback
exit $status
